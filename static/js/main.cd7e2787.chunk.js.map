{"version":3,"sources":["components/search-box/search-box.jsx","components/card/card.jsx","components/card-list/card-list.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","className","type","placeholder","onChange","onSearchChange","Card","alt","src","robot","id","name","email","username","CardList","robots","map","key","App","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","href","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mUAOeA,G,MAJG,SAACC,GACjB,OAAO,2BAAOC,UAAU,aAAaC,KAAK,SAASC,YAAY,gBAAgBC,SAAUJ,EAAMK,mBCUlFC,G,MAVF,SAACN,GAAD,OACX,yBAAKC,UAAU,kBACb,yBAAKM,IAAI,QAAQC,IAAG,+BAA0BR,EAAMS,MAAMC,GAAtC,4BACpB,yBAAKT,UAAU,oBACb,sCAAYD,EAAMS,MAAME,KAAxB,KACA,qCAAWX,EAAMS,MAAMG,OACvB,wCAAcZ,EAAMS,MAAMI,SAA1B,SCESC,G,MARE,SAACd,GAAD,OACf,yBAAKC,UAAU,aACZD,EAAMe,OAAOC,KAAI,SAACP,GAAD,OAChB,kBAAC,EAAD,CAAMQ,IAAKR,EAAMC,GAAID,MAAOA,UC0CnBS,G,wDA3Cb,aAAe,IAAD,8BACZ,gBAcFb,eAAiB,SAACc,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAb1C,EAAKC,MAAQ,CACXT,OAAQ,GACRM,YAAa,IALH,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEL,OAAQc,S,+BAOnC,IAAD,EACyBC,KAAKN,MAA7BT,EADD,EACCA,OAAQM,EADT,EACSA,YACVU,EAAiBhB,EAAOiB,QAAO,SAACvB,GAAD,OAAWA,EAAME,KAAKsB,cAAcC,SAASb,EAAYY,kBAE9F,OACE,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIS,GAAG,SAAP,eACA,kBAAC,EAAD,CAAWL,eAAgByB,KAAKzB,kBAElC,kBAAC,EAAD,CAAUU,OAAQgB,IAClB,uBAAGI,KAAK,UACN,uBAAGC,MAAM,gCAEX,4BAAQnC,UAAU,UAChB,8CACmB,uBAAGmC,MAAM,iBAD5B,OACmD,uBAAGD,KAAK,uBAAR,uB,GApC3CE,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd7e2787.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./search-box.css\";\r\n\r\nconst SearchBox = (props) => {\r\n  return <input className=\"search-box\" type=\"search\" placeholder=\"Search robots\" onChange={props.onSearchChange} />;\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nimport \"./card.css\";\r\n\r\nconst Card = (props) => (\r\n  <div className=\"card-container\">\r\n    <img alt=\"robot\" src={`https://robohash.org/${props.robot.id}?set=set3&size=180x180`} />\r\n    <div className=\"card-discription\">\r\n      <h2> Name: {props.robot.name} </h2>\r\n      <p>Email: {props.robot.email}</p>\r\n      <p> Username:{props.robot.username} </p>\r\n    </div>\r\n  </div>\r\n);\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"../card/card\";\r\nimport \"./card-list.css\";\r\n\r\nconst CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {props.robots.map((robot) => (\r\n      <Card key={robot.id} robot={robot} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\nimport SearchBox from \"./components/search-box/search-box\";\nimport CardList from \"./components/card-list/card-list\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      robots: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter((robot) => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <h1 id=\"title\">Cool Robots</h1>\n          <SearchBox onSearchChange={this.onSearchChange} />\n        </div>\n        <CardList robots={filteredRobots} />\n        <a href=\"#title\">\n          <i class=\"far fa-arrow-alt-circle-up\"></i>\n        </a>\n        <footer className=\"footer\">\n          <h3>\n            &copy; Made with <i class=\"fas fa-heart\"></i> by <a href=\"www.rameshdahal.com\">Ramesh Dahal</a>\n          </h3>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}